/*!
 * http://www.JSON.org/json2.js
 * 2011-10-19
 *
 * Public Domain.
 *
 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
 *
 * See http://www.JSON.org/js.html
 *
 *
 * This code should be minified before deployment.
 * See http://javascript.crockford.com/jsmin.html
 *
 * USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
 * NOT CONTROL.
 *  
 * This is a reference implementation. You are free to copy, modify, or
 * redistribute.
 */
var JSON;
if(!JSON){JSON={};
}(function(){function f(n){return n<10?"0"+n:n;
}if(typeof Date.prototype.toJSON!=="function"){Date.prototype.toJSON=function(key){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null;
};
String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf();
};
}var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;
function quote(string){escapable.lastIndex=0;
return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];
return typeof c==="string"?c:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4);
})+'"':'"'+string+'"';
}function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];
if(value&&typeof value==="object"&&typeof value.toJSON==="function"){value=value.toJSON(key);
}if(typeof rep==="function"){value=rep.call(holder,key,value);
}switch(typeof value){case"string":return quote(value);
case"number":return isFinite(value)?String(value):"null";
case"boolean":case"null":return String(value);
case"object":if(!value){return"null";
}gap+=indent;
partial=[];
if(Object.prototype.toString.apply(value)==="[object Array]"){length=value.length;
for(i=0;
i<length;
i+=1){partial[i]=str(i,value)||"null";
}v=partial.length===0?"[]":gap?"[\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"]":"["+partial.join(",")+"]";
gap=mind;
return v;
}if(rep&&typeof rep==="object"){length=rep.length;
for(i=0;
i<length;
i+=1){if(typeof rep[i]==="string"){k=rep[i];
v=str(k,value);
if(v){partial.push(quote(k)+(gap?": ":":")+v);
}}}}else{for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=str(k,value);
if(v){partial.push(quote(k)+(gap?": ":":")+v);
}}}}v=partial.length===0?"{}":gap?"{\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"}":"{"+partial.join(",")+"}";
gap=mind;
return v;
}}if(typeof JSON.stringify!=="function"){JSON.stringify=function(value,replacer,space){var i;
gap="";
indent="";
if(typeof space==="number"){for(i=0;
i<space;
i+=1){indent+=" ";
}}else{if(typeof space==="string"){indent=space;
}}rep=replacer;
if(replacer&&typeof replacer!=="function"&&(typeof replacer!=="object"||typeof replacer.length!=="number")){throw new Error("JSON.stringify");
}return str("",{"":value});
};
}if(typeof JSON.parse!=="function"){JSON.parse=function(text,reviver){var j;
function walk(holder,key){var k,v,value=holder[key];
if(value&&typeof value==="object"){for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=walk(value,k);
if(v!==undefined){value[k]=v;
}else{delete value[k];
}}}}return reviver.call(holder,key,value);
}text=String(text);
cx.lastIndex=0;
if(cx.test(text)){text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4);
});
}if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");
return typeof reviver==="function"?walk({"":j},""):j;
}throw new SyntaxError("JSON.parse");
};
}}());
/*!
 * Underscore.js 1.2.1
 * (c) 2011 Jeremy Ashkenas, DocumentCloud Inc.
 * Underscore is freely distributable under the MIT license.
 * Portions of Underscore are inspired or borrowed from Prototype,
 * Oliver Steele's Functional, and John Resig's Micro-Templating.
 * For all details and documentation:
 * http://documentcloud.github.com/underscore
 */
(function(){var root=this;
var previousUnderscore=root._;
var breaker={};
var ArrayProto=Array.prototype,ObjProto=Object.prototype,FuncProto=Function.prototype;
var slice=ArrayProto.slice,unshift=ArrayProto.unshift,toString=ObjProto.toString,hasOwnProperty=ObjProto.hasOwnProperty;
var nativeForEach=ArrayProto.forEach,nativeMap=ArrayProto.map,nativeReduce=ArrayProto.reduce,nativeReduceRight=ArrayProto.reduceRight,nativeFilter=ArrayProto.filter,nativeEvery=ArrayProto.every,nativeSome=ArrayProto.some,nativeIndexOf=ArrayProto.indexOf,nativeLastIndexOf=ArrayProto.lastIndexOf,nativeIsArray=Array.isArray,nativeKeys=Object.keys,nativeBind=FuncProto.bind;
var _=function(obj){return new wrapper(obj);
};
if(typeof exports!=="undefined"){if(typeof module!=="undefined"&&module.exports){exports=module.exports=_;
}exports._=_;
}else{if(typeof define==="function"&&define.amd){define("underscore",function(){return _;
});
}else{root["_"]=_;
}}_.VERSION="1.2.1";
var each=_.each=_.forEach=function(obj,iterator,context){if(obj==null){return;
}if(nativeForEach&&obj.forEach===nativeForEach){obj.forEach(iterator,context);
}else{if(obj.length===+obj.length){for(var i=0,l=obj.length;
i<l;
i++){if(i in obj&&iterator.call(context,obj[i],i,obj)===breaker){return;
}}}else{for(var key in obj){if(hasOwnProperty.call(obj,key)){if(iterator.call(context,obj[key],key,obj)===breaker){return;
}}}}}};
_.map=function(obj,iterator,context){var results=[];
if(obj==null){return results;
}if(nativeMap&&obj.map===nativeMap){return obj.map(iterator,context);
}each(obj,function(value,index,list){results[results.length]=iterator.call(context,value,index,list);
});
return results;
};
_.reduce=_.foldl=_.inject=function(obj,iterator,memo,context){var initial=memo!==void 0;
if(obj==null){obj=[];
}if(nativeReduce&&obj.reduce===nativeReduce){if(context){iterator=_.bind(iterator,context);
}return initial?obj.reduce(iterator,memo):obj.reduce(iterator);
}each(obj,function(value,index,list){if(!initial){memo=value;
initial=true;
}else{memo=iterator.call(context,memo,value,index,list);
}});
if(!initial){throw new TypeError("Reduce of empty array with no initial value");
}return memo;
};
_.reduceRight=_.foldr=function(obj,iterator,memo,context){if(obj==null){obj=[];
}if(nativeReduceRight&&obj.reduceRight===nativeReduceRight){if(context){iterator=_.bind(iterator,context);
}return memo!==void 0?obj.reduceRight(iterator,memo):obj.reduceRight(iterator);
}var reversed=(_.isArray(obj)?obj.slice():_.toArray(obj)).reverse();
return _.reduce(reversed,iterator,memo,context);
};
_.find=_.detect=function(obj,iterator,context){var result;
any(obj,function(value,index,list){if(iterator.call(context,value,index,list)){result=value;
return true;
}});
return result;
};
_.filter=_.select=function(obj,iterator,context){var results=[];
if(obj==null){return results;
}if(nativeFilter&&obj.filter===nativeFilter){return obj.filter(iterator,context);
}each(obj,function(value,index,list){if(iterator.call(context,value,index,list)){results[results.length]=value;
}});
return results;
};
_.reject=function(obj,iterator,context){var results=[];
if(obj==null){return results;
}each(obj,function(value,index,list){if(!iterator.call(context,value,index,list)){results[results.length]=value;
}});
return results;
};
_.every=_.all=function(obj,iterator,context){var result=true;
if(obj==null){return result;
}if(nativeEvery&&obj.every===nativeEvery){return obj.every(iterator,context);
}each(obj,function(value,index,list){if(!(result=result&&iterator.call(context,value,index,list))){return breaker;
}});
return result;
};
var any=_.some=_.any=function(obj,iterator,context){iterator=iterator||_.identity;
var result=false;
if(obj==null){return result;
}if(nativeSome&&obj.some===nativeSome){return obj.some(iterator,context);
}each(obj,function(value,index,list){if(result||(result=iterator.call(context,value,index,list))){return breaker;
}});
return !!result;
};
_.include=_.contains=function(obj,target){var found=false;
if(obj==null){return found;
}if(nativeIndexOf&&obj.indexOf===nativeIndexOf){return obj.indexOf(target)!=-1;
}found=any(obj,function(value){return value===target;
});
return found;
};
_.invoke=function(obj,method){var args=slice.call(arguments,2);
return _.map(obj,function(value){return(method.call?method||value:value[method]).apply(value,args);
});
};
_.pluck=function(obj,key){return _.map(obj,function(value){return value[key];
});
};
_.max=function(obj,iterator,context){if(!iterator&&_.isArray(obj)){return Math.max.apply(Math,obj);
}if(!iterator&&_.isEmpty(obj)){return -Infinity;
}var result={computed:-Infinity};
each(obj,function(value,index,list){var computed=iterator?iterator.call(context,value,index,list):value;
computed>=result.computed&&(result={value:value,computed:computed});
});
return result.value;
};
_.min=function(obj,iterator,context){if(!iterator&&_.isArray(obj)){return Math.min.apply(Math,obj);
}if(!iterator&&_.isEmpty(obj)){return Infinity;
}var result={computed:Infinity};
each(obj,function(value,index,list){var computed=iterator?iterator.call(context,value,index,list):value;
computed<result.computed&&(result={value:value,computed:computed});
});
return result.value;
};
_.shuffle=function(obj){var shuffled=[],rand;
each(obj,function(value,index,list){if(index==0){shuffled[0]=value;
}else{rand=Math.floor(Math.random()*(index+1));
shuffled[index]=shuffled[rand];
shuffled[rand]=value;
}});
return shuffled;
};
_.sortBy=function(obj,iterator,context){return _.pluck(_.map(obj,function(value,index,list){return{value:value,criteria:iterator.call(context,value,index,list)};
}).sort(function(left,right){var a=left.criteria,b=right.criteria;
return a<b?-1:a>b?1:0;
}),"value");
};
_.groupBy=function(obj,val){var result={};
var iterator=_.isFunction(val)?val:function(obj){return obj[val];
};
each(obj,function(value,index){var key=iterator(value,index);
(result[key]||(result[key]=[])).push(value);
});
return result;
};
_.sortedIndex=function(array,obj,iterator){iterator||(iterator=_.identity);
var low=0,high=array.length;
while(low<high){var mid=(low+high)>>1;
iterator(array[mid])<iterator(obj)?low=mid+1:high=mid;
}return low;
};
_.toArray=function(iterable){if(!iterable){return[];
}if(iterable.toArray){return iterable.toArray();
}if(_.isArray(iterable)){return slice.call(iterable);
}if(_.isArguments(iterable)){return slice.call(iterable);
}return _.values(iterable);
};
_.size=function(obj){return _.toArray(obj).length;
};
_.first=_.head=function(array,n,guard){return(n!=null)&&!guard?slice.call(array,0,n):array[0];
};
_.initial=function(array,n,guard){return slice.call(array,0,array.length-((n==null)||guard?1:n));
};
_.last=function(array,n,guard){if((n!=null)&&!guard){return slice.call(array,Math.max(array.length-n,0));
}else{return array[array.length-1];
}};
_.rest=_.tail=function(array,index,guard){return slice.call(array,(index==null)||guard?1:index);
};
_.compact=function(array){return _.filter(array,function(value){return !!value;
});
};
_.flatten=function(array,shallow){return _.reduce(array,function(memo,value){if(_.isArray(value)){return memo.concat(shallow?value:_.flatten(value));
}memo[memo.length]=value;
return memo;
},[]);
};
_.without=function(array){return _.difference(array,slice.call(arguments,1));
};
_.uniq=_.unique=function(array,isSorted,iterator){var initial=iterator?_.map(array,iterator):array;
var result=[];
_.reduce(initial,function(memo,el,i){if(0==i||(isSorted===true?_.last(memo)!=el:!_.include(memo,el))){memo[memo.length]=el;
result[result.length]=array[i];
}return memo;
},[]);
return result;
};
_.union=function(){return _.uniq(_.flatten(arguments,true));
};
_.intersection=_.intersect=function(array){var rest=slice.call(arguments,1);
return _.filter(_.uniq(array),function(item){return _.every(rest,function(other){return _.indexOf(other,item)>=0;
});
});
};
_.difference=function(array,other){return _.filter(array,function(value){return !_.include(other,value);
});
};
_.zip=function(){var args=slice.call(arguments);
var length=_.max(_.pluck(args,"length"));
var results=new Array(length);
for(var i=0;
i<length;
i++){results[i]=_.pluck(args,""+i);
}return results;
};
_.indexOf=function(array,item,isSorted){if(array==null){return -1;
}var i,l;
if(isSorted){i=_.sortedIndex(array,item);
return array[i]===item?i:-1;
}if(nativeIndexOf&&array.indexOf===nativeIndexOf){return array.indexOf(item);
}for(i=0,l=array.length;
i<l;
i++){if(array[i]===item){return i;
}}return -1;
};
_.lastIndexOf=function(array,item){if(array==null){return -1;
}if(nativeLastIndexOf&&array.lastIndexOf===nativeLastIndexOf){return array.lastIndexOf(item);
}var i=array.length;
while(i--){if(array[i]===item){return i;
}}return -1;
};
_.range=function(start,stop,step){if(arguments.length<=1){stop=start||0;
start=0;
}step=arguments[2]||1;
var len=Math.max(Math.ceil((stop-start)/step),0);
var idx=0;
var range=new Array(len);
while(idx<len){range[idx++]=start;
start+=step;
}return range;
};
var ctor=function(){};
_.bind=function bind(func,context){var bound,args;
if(func.bind===nativeBind&&nativeBind){return nativeBind.apply(func,slice.call(arguments,1));
}if(!_.isFunction(func)){throw new TypeError;
}args=slice.call(arguments,2);
return bound=function(){if(!(this instanceof bound)){return func.apply(context,args.concat(slice.call(arguments)));
}ctor.prototype=func.prototype;
var self=new ctor;
var result=func.apply(self,args.concat(slice.call(arguments)));
if(Object(result)===result){return result;
}return self;
};
};
_.bindAll=function(obj){var funcs=slice.call(arguments,1);
if(funcs.length==0){funcs=_.functions(obj);
}each(funcs,function(f){obj[f]=_.bind(obj[f],obj);
});
return obj;
};
_.memoize=function(func,hasher){var memo={};
hasher||(hasher=_.identity);
return function(){var key=hasher.apply(this,arguments);
return hasOwnProperty.call(memo,key)?memo[key]:(memo[key]=func.apply(this,arguments));
};
};
_.delay=function(func,wait){var args=slice.call(arguments,2);
return setTimeout(function(){return func.apply(func,args);
},wait);
};
_.defer=function(func){return _.delay.apply(_,[func,1].concat(slice.call(arguments,1)));
};
_.throttle=function(func,wait){var context,args,timeout,throttling,more;
var whenDone=_.debounce(function(){more=throttling=false;
},wait);
return function(){context=this;
args=arguments;
var later=function(){timeout=null;
if(more){func.apply(context,args);
}whenDone();
};
if(!timeout){timeout=setTimeout(later,wait);
}if(throttling){more=true;
}else{func.apply(context,args);
}whenDone();
throttling=true;
};
};
_.debounce=function(func,wait){var timeout;
return function(){var context=this,args=arguments;
var later=function(){timeout=null;
func.apply(context,args);
};
clearTimeout(timeout);
timeout=setTimeout(later,wait);
};
};
_.once=function(func){var ran=false,memo;
return function(){if(ran){return memo;
}ran=true;
return memo=func.apply(this,arguments);
};
};
_.wrap=function(func,wrapper){return function(){var args=[func].concat(slice.call(arguments));
return wrapper.apply(this,args);
};
};
_.compose=function(){var funcs=slice.call(arguments);
return function(){var args=slice.call(arguments);
for(var i=funcs.length-1;
i>=0;
i--){args=[funcs[i].apply(this,args)];
}return args[0];
};
};
_.after=function(times,func){if(times<=0){return func();
}return function(){if(--times<1){return func.apply(this,arguments);
}};
};
_.keys=nativeKeys||function(obj){if(obj!==Object(obj)){throw new TypeError("Invalid object");
}var keys=[];
for(var key in obj){if(hasOwnProperty.call(obj,key)){keys[keys.length]=key;
}}return keys;
};
_.values=function(obj){return _.map(obj,_.identity);
};
_.functions=_.methods=function(obj){var names=[];
for(var key in obj){if(_.isFunction(obj[key])){names.push(key);
}}return names.sort();
};
_.extend=function(obj){each(slice.call(arguments,1),function(source){for(var prop in source){if(source[prop]!==void 0){obj[prop]=source[prop];
}}});
return obj;
};
_.defaults=function(obj){each(slice.call(arguments,1),function(source){for(var prop in source){if(obj[prop]==null){obj[prop]=source[prop];
}}});
return obj;
};
_.clone=function(obj){if(!_.isObject(obj)){return obj;
}return _.isArray(obj)?obj.slice():_.extend({},obj);
};
_.tap=function(obj,interceptor){interceptor(obj);
return obj;
};
function eq(a,b,stack){if(a===b){return a!==0||1/a==1/b;
}if(a==null||b==null){return a===b;
}if(a._chain){a=a._wrapped;
}if(b._chain){b=b._wrapped;
}if(_.isFunction(a.isEqual)){return a.isEqual(b);
}if(_.isFunction(b.isEqual)){return b.isEqual(a);
}var className=toString.call(a);
if(className!=toString.call(b)){return false;
}switch(className){case"[object String]":return String(a)==String(b);
case"[object Number]":a=+a;
b=+b;
return a!=a?b!=b:(a==0?1/a==1/b:a==b);
case"[object Date]":case"[object Boolean]":return +a==+b;
case"[object RegExp]":return a.source==b.source&&a.global==b.global&&a.multiline==b.multiline&&a.ignoreCase==b.ignoreCase;
}if(typeof a!="object"||typeof b!="object"){return false;
}var length=stack.length;
while(length--){if(stack[length]==a){return true;
}}stack.push(a);
var size=0,result=true;
if(className=="[object Array]"){size=a.length;
result=size==b.length;
if(result){while(size--){if(!(result=size in a==size in b&&eq(a[size],b[size],stack))){break;
}}}}else{if("constructor" in a!="constructor" in b||a.constructor!=b.constructor){return false;
}for(var key in a){if(hasOwnProperty.call(a,key)){size++;
if(!(result=hasOwnProperty.call(b,key)&&eq(a[key],b[key],stack))){break;
}}}if(result){for(key in b){if(hasOwnProperty.call(b,key)&&!(size--)){break;
}}result=!size;
}}stack.pop();
return result;
}_.isEqual=function(a,b){return eq(a,b,[]);
};
_.isEmpty=function(obj){if(_.isArray(obj)||_.isString(obj)){return obj.length===0;
}for(var key in obj){if(hasOwnProperty.call(obj,key)){return false;
}}return true;
};
_.isElement=function(obj){return !!(obj&&obj.nodeType==1);
};
_.isArray=nativeIsArray||function(obj){return toString.call(obj)=="[object Array]";
};
_.isObject=function(obj){return obj===Object(obj);
};
if(toString.call(arguments)=="[object Arguments]"){_.isArguments=function(obj){return toString.call(obj)=="[object Arguments]";
};
}else{_.isArguments=function(obj){return !!(obj&&hasOwnProperty.call(obj,"callee"));
};
}_.isFunction=function(obj){return toString.call(obj)=="[object Function]";
};
_.isString=function(obj){return toString.call(obj)=="[object String]";
};
_.isNumber=function(obj){return toString.call(obj)=="[object Number]";
};
_.isNaN=function(obj){return obj!==obj;
};
_.isBoolean=function(obj){return obj===true||obj===false||toString.call(obj)=="[object Boolean]";
};
_.isDate=function(obj){return toString.call(obj)=="[object Date]";
};
_.isRegExp=function(obj){return toString.call(obj)=="[object RegExp]";
};
_.isNull=function(obj){return obj===null;
};
_.isUndefined=function(obj){return obj===void 0;
};
_.noConflict=function(){root._=previousUnderscore;
return this;
};
_.identity=function(value){return value;
};
_.times=function(n,iterator,context){for(var i=0;
i<n;
i++){iterator.call(context,i);
}};
_.escape=function(string){return(""+string).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;").replace(/\//g,"&#x2F;");
};
_.mixin=function(obj){each(_.functions(obj),function(name){addToWrapper(name,_[name]=obj[name]);
});
};
var idCounter=0;
_.uniqueId=function(prefix){var id=idCounter++;
return prefix?prefix+id:id;
};
_.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};
_.template=function(str,data){var c=_.templateSettings;
var tmpl="var __p=[],print=function(){__p.push.apply(__p,arguments);};"+"with(obj||{}){__p.push('"+str.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(c.escape,function(match,code){return"',_.escape("+code.replace(/\\'/g,"'")+"),'";
}).replace(c.interpolate,function(match,code){return"',"+code.replace(/\\'/g,"'")+",'";
}).replace(c.evaluate||null,function(match,code){return"');"+code.replace(/\\'/g,"'").replace(/[\r\n\t]/g," ")+";__p.push('";
}).replace(/\r/g,"\\r").replace(/\n/g,"\\n").replace(/\t/g,"\\t")+"');}return __p.join('');";
var func=new Function("obj","_",tmpl);
return data?func(data,_):function(data){return func(data,_);
};
};
var wrapper=function(obj){this._wrapped=obj;
};
_.prototype=wrapper.prototype;
var result=function(obj,chain){return chain?_(obj).chain():obj;
};
var addToWrapper=function(name,func){wrapper.prototype[name]=function(){var args=slice.call(arguments);
unshift.call(args,this._wrapped);
return result(func.apply(_,args),this._chain);
};
};
_.mixin(_);
each(["pop","push","reverse","shift","sort","splice","unshift"],function(name){var method=ArrayProto[name];
wrapper.prototype[name]=function(){method.apply(this._wrapped,arguments);
return result(this._wrapped,this._chain);
};
});
each(["concat","join","slice"],function(name){var method=ArrayProto[name];
wrapper.prototype[name]=function(){return result(method.apply(this._wrapped,arguments),this._chain);
};
});
wrapper.prototype.chain=function(){this._chain=true;
return this;
};
wrapper.prototype.value=function(){return this._wrapped;
};
}).call(this);
/*!
 * Backbone.js 0.5.3
 * (c) 2010 Jeremy Ashkenas, DocumentCloud Inc.
 * Backbone may be freely distributed under the MIT license.
 * For all details and documentation:
 * http://documentcloud.github.com/backbone
 */
(function(){var root=this;
var previousBackbone=root.Backbone;
var Backbone;
if(typeof exports!=="undefined"){Backbone=exports;
}else{Backbone=root.Backbone={};
}Backbone.VERSION="0.5.3";
var _=root._;
if(!_&&(typeof require!=="undefined")){_=require("underscore")._;
}var $=root.jQuery||root.Zepto;
Backbone.noConflict=function(){root.Backbone=previousBackbone;
return this;
};
Backbone.emulateHTTP=false;
Backbone.emulateJSON=false;
Backbone.Events={bind:function(ev,callback,context){var calls=this._callbacks||(this._callbacks={});
var list=calls[ev]||(calls[ev]=[]);
list.push([callback,context]);
return this;
},unbind:function(ev,callback){var calls;
if(!ev){this._callbacks={};
}else{if(calls=this._callbacks){if(!callback){calls[ev]=[];
}else{var list=calls[ev];
if(!list){return this;
}for(var i=0,l=list.length;
i<l;
i++){if(list[i]&&callback===list[i][0]){list[i]=null;
break;
}}}}}return this;
},trigger:function(eventName){var list,calls,ev,callback,args;
var both=2;
if(!(calls=this._callbacks)){return this;
}while(both--){ev=both?eventName:"all";
if(list=calls[ev]){for(var i=0,l=list.length;
i<l;
i++){if(!(callback=list[i])){list.splice(i,1);
i--;
l--;
}else{args=both?Array.prototype.slice.call(arguments,1):arguments;
callback[0].apply(callback[1]||this,args);
}}}}return this;
}};
Backbone.Model=function(attributes,options){var defaults;
attributes||(attributes={});
if(defaults=this.defaults){if(_.isFunction(defaults)){defaults=defaults.call(this);
}attributes=_.extend({},defaults,attributes);
}this.attributes={};
this._escapedAttributes={};
this.cid=_.uniqueId("c");
this.set(attributes,{silent:true});
this._changed=false;
this._previousAttributes=_.clone(this.attributes);
if(options&&options.collection){this.collection=options.collection;
}this.initialize(attributes,options);
};
_.extend(Backbone.Model.prototype,Backbone.Events,{_previousAttributes:null,_changed:false,idAttribute:"id",initialize:function(){},toJSON:function(){return _.clone(this.attributes);
},get:function(attr){return this.attributes[attr];
},escape:function(attr){var html;
if(html=this._escapedAttributes[attr]){return html;
}var val=this.attributes[attr];
return this._escapedAttributes[attr]=escapeHTML(val==null?"":""+val);
},has:function(attr){return this.attributes[attr]!=null;
},set:function(attrs,options){options||(options={});
if(!attrs){return this;
}if(attrs.attributes){attrs=attrs.attributes;
}var now=this.attributes,escaped=this._escapedAttributes;
if(!options.silent&&this.validate&&!this._performValidation(attrs,options)){return false;
}if(this.idAttribute in attrs){this.id=attrs[this.idAttribute];
}var alreadyChanging=this._changing;
this._changing=true;
for(var attr in attrs){var val=attrs[attr];
if(!_.isEqual(now[attr],val)){now[attr]=val;
delete escaped[attr];
this._changed=true;
if(!options.silent){this.trigger("change:"+attr,this,val,options);
}}}if(!alreadyChanging&&!options.silent&&this._changed){this.change(options);
}this._changing=false;
return this;
},unset:function(attr,options){if(!(attr in this.attributes)){return this;
}options||(options={});
var value=this.attributes[attr];
var validObj={};
validObj[attr]=void 0;
if(!options.silent&&this.validate&&!this._performValidation(validObj,options)){return false;
}delete this.attributes[attr];
delete this._escapedAttributes[attr];
if(attr==this.idAttribute){delete this.id;
}this._changed=true;
if(!options.silent){this.trigger("change:"+attr,this,void 0,options);
this.change(options);
}return this;
},clear:function(options){options||(options={});
var attr;
var old=this.attributes;
var validObj={};
for(attr in old){validObj[attr]=void 0;
}if(!options.silent&&this.validate&&!this._performValidation(validObj,options)){return false;
}this.attributes={};
this._escapedAttributes={};
this._changed=true;
if(!options.silent){for(attr in old){this.trigger("change:"+attr,this,void 0,options);
}this.change(options);
}return this;
},fetch:function(options){options||(options={});
var model=this;
var success=options.success;
options.success=function(resp,status,xhr){if(!model.set(model.parse(resp,xhr),options)){return false;
}if(success){success(model,resp);
}};
options.error=wrapError(options.error,model,options);
return(this.sync||Backbone.sync).call(this,"read",this,options);
},save:function(attrs,options){options||(options={});
if(attrs&&!this.set(attrs,options)){return false;
}var model=this;
var success=options.success;
options.success=function(resp,status,xhr){if(!model.set(model.parse(resp,xhr),options)){return false;
}if(success){success(model,resp,xhr);
}};
options.error=wrapError(options.error,model,options);
var method=this.isNew()?"create":"update";
return(this.sync||Backbone.sync).call(this,method,this,options);
},destroy:function(options){options||(options={});
if(this.isNew()){return this.trigger("destroy",this,this.collection,options);
}var model=this;
var success=options.success;
options.success=function(resp){model.trigger("destroy",model,model.collection,options);
if(success){success(model,resp);
}};
options.error=wrapError(options.error,model,options);
return(this.sync||Backbone.sync).call(this,"delete",this,options);
},url:function(){var base=getUrl(this.collection)||this.urlRoot||urlError();
if(this.isNew()){return base;
}return base+(base.charAt(base.length-1)=="/"?"":"/")+encodeURIComponent(this.id);
},parse:function(resp,xhr){return resp;
},clone:function(){return new this.constructor(this);
},isNew:function(){return this.id==null;
},change:function(options){this.trigger("change",this,options);
this._previousAttributes=_.clone(this.attributes);
this._changed=false;
},hasChanged:function(attr){if(attr){return this._previousAttributes[attr]!=this.attributes[attr];
}return this._changed;
},changedAttributes:function(now){now||(now=this.attributes);
var old=this._previousAttributes;
var changed=false;
for(var attr in now){if(!_.isEqual(old[attr],now[attr])){changed=changed||{};
changed[attr]=now[attr];
}}return changed;
},previous:function(attr){if(!attr||!this._previousAttributes){return null;
}return this._previousAttributes[attr];
},previousAttributes:function(){return _.clone(this._previousAttributes);
},_performValidation:function(attrs,options){var error=this.validate(attrs);
if(error){if(options.error){options.error(this,error,options);
}else{this.trigger("error",this,error,options);
}return false;
}return true;
}});
Backbone.Collection=function(models,options){options||(options={});
if(options.comparator){this.comparator=options.comparator;
}_.bindAll(this,"_onModelEvent","_removeReference");
this._reset();
if(models){this.reset(models,{silent:true});
}this.initialize.apply(this,arguments);
};
_.extend(Backbone.Collection.prototype,Backbone.Events,{model:Backbone.Model,initialize:function(){},toJSON:function(){return this.map(function(model){return model.toJSON();
});
},add:function(models,options){if(_.isArray(models)){for(var i=0,l=models.length;
i<l;
i++){this._add(models[i],options);
}}else{this._add(models,options);
}return this;
},remove:function(models,options){if(_.isArray(models)){for(var i=0,l=models.length;
i<l;
i++){this._remove(models[i],options);
}}else{this._remove(models,options);
}return this;
},get:function(id){if(id==null){return null;
}return this._byId[id.id!=null?id.id:id];
},getByCid:function(cid){return cid&&this._byCid[cid.cid||cid];
},at:function(index){return this.models[index];
},sort:function(options){options||(options={});
if(!this.comparator){throw new Error("Cannot sort a set without a comparator");
}this.models=this.sortBy(this.comparator);
if(!options.silent){this.trigger("reset",this,options);
}return this;
},pluck:function(attr){return _.map(this.models,function(model){return model.get(attr);
});
},reset:function(models,options){models||(models=[]);
options||(options={});
this.each(this._removeReference);
this._reset();
this.add(models,{silent:true});
if(!options.silent){this.trigger("reset",this,options);
}return this;
},fetch:function(options){options||(options={});
var collection=this;
var success=options.success;
options.success=function(resp,status,xhr){collection[options.add?"add":"reset"](collection.parse(resp,xhr),options);
if(success){success(collection,resp);
}};
options.error=wrapError(options.error,collection,options);
return(this.sync||Backbone.sync).call(this,"read",this,options);
},create:function(model,options){var coll=this;
options||(options={});
model=this._prepareModel(model,options);
if(!model){return false;
}var success=options.success;
options.success=function(nextModel,resp,xhr){coll.add(nextModel,options);
if(success){success(nextModel,resp,xhr);
}};
model.save(null,options);
return model;
},parse:function(resp,xhr){return resp;
},chain:function(){return _(this.models).chain();
},_reset:function(options){this.length=0;
this.models=[];
this._byId={};
this._byCid={};
},_prepareModel:function(model,options){if(!(model instanceof Backbone.Model)){var attrs=model;
model=new this.model(attrs,{collection:this});
if(model.validate&&!model._performValidation(attrs,options)){model=false;
}}else{if(!model.collection){model.collection=this;
}}return model;
},_add:function(model,options){options||(options={});
model=this._prepareModel(model,options);
if(!model){return false;
}var already=this.getByCid(model);
if(already){throw new Error(["Can't add the same model to a set twice",already.id]);
}this._byId[model.id]=model;
this._byCid[model.cid]=model;
var index=options.at!=null?options.at:this.comparator?this.sortedIndex(model,this.comparator):this.length;
this.models.splice(index,0,model);
model.bind("all",this._onModelEvent);
this.length++;
if(!options.silent){model.trigger("add",model,this,options);
}return model;
},_remove:function(model,options){options||(options={});
model=this.getByCid(model)||this.get(model);
if(!model){return null;
}delete this._byId[model.id];
delete this._byCid[model.cid];
this.models.splice(this.indexOf(model),1);
this.length--;
if(!options.silent){model.trigger("remove",model,this,options);
}this._removeReference(model);
return model;
},_removeReference:function(model){if(this==model.collection){delete model.collection;
}model.unbind("all",this._onModelEvent);
},_onModelEvent:function(ev,model,collection,options){if((ev=="add"||ev=="remove")&&collection!=this){return;
}if(ev=="destroy"){this._remove(model,options);
}if(model&&ev==="change:"+model.idAttribute){delete this._byId[model.previous(model.idAttribute)];
this._byId[model.id]=model;
}this.trigger.apply(this,arguments);
}});
var methods=["forEach","each","map","reduce","reduceRight","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","sortBy","sortedIndex","toArray","size","first","rest","last","without","indexOf","lastIndexOf","isEmpty","groupBy"];
_.each(methods,function(method){Backbone.Collection.prototype[method]=function(){return _[method].apply(_,[this.models].concat(_.toArray(arguments)));
};
});
Backbone.Router=function(options){options||(options={});
if(options.routes){this.routes=options.routes;
}this._bindRoutes();
this.initialize.apply(this,arguments);
};
var namedParam=/:([\w\d]+)/g;
var splatParam=/\*([\w\d]+)/g;
var escapeRegExp=/[-[\]{}()+?.,\\^$|#\s]/g;
_.extend(Backbone.Router.prototype,Backbone.Events,{initialize:function(){},route:function(route,name,callback){Backbone.history||(Backbone.history=new Backbone.History);
if(!_.isRegExp(route)){route=this._routeToRegExp(route);
}Backbone.history.route(route,_.bind(function(fragment){var args=this._extractParameters(route,fragment);
callback.apply(this,args);
this.trigger.apply(this,["route:"+name].concat(args));
},this));
},navigate:function(fragment,triggerRoute){Backbone.history.navigate(fragment,triggerRoute);
},_bindRoutes:function(){if(!this.routes){return;
}var routes=[];
for(var route in this.routes){routes.unshift([route,this.routes[route]]);
}for(var i=0,l=routes.length;
i<l;
i++){this.route(routes[i][0],routes[i][1],this[routes[i][1]]);
}},_routeToRegExp:function(route){route=route.replace(escapeRegExp,"\\$&").replace(namedParam,"([^/]*)").replace(splatParam,"(.*?)");
return new RegExp("^"+route+"$");
},_extractParameters:function(route,fragment){return route.exec(fragment).slice(1);
}});
Backbone.History=function(){this.handlers=[];
_.bindAll(this,"checkUrl");
};
var hashStrip=/^#*/;
var isExplorer=/msie [\w.]+/;
var historyStarted=false;
_.extend(Backbone.History.prototype,{interval:50,getFragment:function(fragment,forcePushState){if(fragment==null){if(this._hasPushState||forcePushState){fragment=window.location.pathname;
var search=window.location.search;
if(search){fragment+=search;
}if(fragment.indexOf(this.options.root)==0){fragment=fragment.substr(this.options.root.length);
}}else{fragment=window.location.hash;
}}return decodeURIComponent(fragment.replace(hashStrip,""));
},start:function(options){if(historyStarted){throw new Error("Backbone.history has already been started");
}this.options=_.extend({},{root:"/"},this.options,options);
this._wantsPushState=!!this.options.pushState;
this._hasPushState=!!(this.options.pushState&&window.history&&window.history.pushState);
var fragment=this.getFragment();
var docMode=document.documentMode;
var oldIE=(isExplorer.exec(navigator.userAgent.toLowerCase())&&(!docMode||docMode<=7));
if(oldIE){this.iframe=$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow;
this.navigate(fragment);
}if(this._hasPushState){$(window).bind("popstate",this.checkUrl);
}else{if("onhashchange" in window&&!oldIE){$(window).bind("hashchange",this.checkUrl);
}else{setInterval(this.checkUrl,this.interval);
}}this.fragment=fragment;
historyStarted=true;
var loc=window.location;
var atRoot=loc.pathname==this.options.root;
if(this._wantsPushState&&!this._hasPushState&&!atRoot){this.fragment=this.getFragment(null,true);
window.location.replace(this.options.root+"#"+this.fragment);
return true;
}else{if(this._wantsPushState&&this._hasPushState&&atRoot&&loc.hash){this.fragment=loc.hash.replace(hashStrip,"");
window.history.replaceState({},document.title,loc.protocol+"//"+loc.host+this.options.root+this.fragment);
}}if(!this.options.silent){return this.loadUrl();
}},route:function(route,callback){this.handlers.unshift({route:route,callback:callback});
},checkUrl:function(e){var current=this.getFragment();
if(current==this.fragment&&this.iframe){current=this.getFragment(this.iframe.location.hash);
}if(current==this.fragment||current==decodeURIComponent(this.fragment)){return false;
}if(this.iframe){this.navigate(current);
}this.loadUrl()||this.loadUrl(window.location.hash);
},loadUrl:function(fragmentOverride){var fragment=this.fragment=this.getFragment(fragmentOverride);
var matched=_.any(this.handlers,function(handler){if(handler.route.test(fragment)){handler.callback(fragment);
return true;
}});
return matched;
},navigate:function(fragment,triggerRoute){var frag=(fragment||"").replace(hashStrip,"");
if(this.fragment==frag||this.fragment==decodeURIComponent(frag)){return;
}if(this._hasPushState){var loc=window.location;
if(frag.indexOf(this.options.root)!=0){frag=this.options.root+frag;
}this.fragment=frag;
window.history.pushState({},document.title,loc.protocol+"//"+loc.host+frag);
}else{window.location.hash=this.fragment=frag;
if(this.iframe&&(frag!=this.getFragment(this.iframe.location.hash))){this.iframe.document.open().close();
this.iframe.location.hash=frag;
}}if(triggerRoute){this.loadUrl(fragment);
}}});
Backbone.View=function(options){this.cid=_.uniqueId("view");
this._configure(options||{});
this._ensureElement();
this.delegateEvents();
this.initialize.apply(this,arguments);
};
var selectorDelegate=function(selector){return $(selector,this.el);
};
var eventSplitter=/^(\S+)\s*(.*)$/;
var viewOptions=["model","collection","el","id","attributes","className","tagName"];
_.extend(Backbone.View.prototype,Backbone.Events,{tagName:"div",$:selectorDelegate,initialize:function(){},render:function(){return this;
},remove:function(){$(this.el).remove();
return this;
},make:function(tagName,attributes,content){var el=document.createElement(tagName);
if(attributes){$(el).attr(attributes);
}if(content){$(el).html(content);
}return el;
},delegateEvents:function(events){if(!(events||(events=this.events))){return;
}if(_.isFunction(events)){events=events.call(this);
}$(this.el).unbind(".delegateEvents"+this.cid);
for(var key in events){var method=this[events[key]];
if(!method){throw new Error('Event "'+events[key]+'" does not exist');
}var match=key.match(eventSplitter);
var eventName=match[1],selector=match[2];
method=_.bind(method,this);
eventName+=".delegateEvents"+this.cid;
if(selector===""){$(this.el).bind(eventName,method);
}else{$(this.el).delegate(selector,eventName,method);
}}},_configure:function(options){if(this.options){options=_.extend({},this.options,options);
}for(var i=0,l=viewOptions.length;
i<l;
i++){var attr=viewOptions[i];
if(options[attr]){this[attr]=options[attr];
}}this.options=options;
},_ensureElement:function(){if(!this.el){var attrs=this.attributes||{};
if(this.id){attrs.id=this.id;
}if(this.className){attrs["class"]=this.className;
}this.el=this.make(this.tagName,attrs);
}else{if(_.isString(this.el)){this.el=$(this.el).get(0);
}}}});
var extend=function(protoProps,classProps){var child=inherits(this,protoProps,classProps);
child.extend=this.extend;
return child;
};
Backbone.Model.extend=Backbone.Collection.extend=Backbone.Router.extend=Backbone.View.extend=extend;
var methodMap={"create":"POST","update":"PUT","delete":"DELETE","read":"GET"};
Backbone.sync=function(method,model,options){var type=methodMap[method];
var params=_.extend({type:type,dataType:"json"},options);
if(!params.url){params.url=getUrl(model)||urlError();
}if(!params.data&&model&&(method=="create"||method=="update")){params.contentType="application/json";
params.data=JSON.stringify(model.toJSON());
}if(Backbone.emulateJSON){params.contentType="application/x-www-form-urlencoded";
params.data=params.data?{model:params.data}:{};
}if(Backbone.emulateHTTP){if(type==="PUT"||type==="DELETE"){if(Backbone.emulateJSON){params.data._method=type;
}params.type="POST";
params.beforeSend=function(xhr){xhr.setRequestHeader("X-HTTP-Method-Override",type);
};
}}if(params.type!=="GET"&&!Backbone.emulateJSON){params.processData=false;
}return $.ajax(params);
};
var ctor=function(){};
var inherits=function(parent,protoProps,staticProps){var child;
if(protoProps&&protoProps.hasOwnProperty("constructor")){child=protoProps.constructor;
}else{child=function(){return parent.apply(this,arguments);
};
}_.extend(child,parent);
ctor.prototype=parent.prototype;
child.prototype=new ctor();
if(protoProps){_.extend(child.prototype,protoProps);
}if(staticProps){_.extend(child,staticProps);
}child.prototype.constructor=child;
child.__super__=parent.prototype;
return child;
};
var getUrl=function(object){if(!(object&&object.url)){return null;
}return _.isFunction(object.url)?object.url():object.url;
};
var urlError=function(){throw new Error('A "url" property or function must be specified');
};
var wrapError=function(onError,model,options){return function(resp){if(onError){onError(model,resp,options);
}else{model.trigger("error",model,resp,options);
}};
};
var escapeHTML=function(string){return string.replace(/&(?!\w+;|#\d+;|#x[\da-f]+;)/gi,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;").replace(/\//g,"&#x2F;");
};
}).call(this);
/*!
 * Copyright (c) Amazon.com, Inc.
 * All rights reserved.
 */
(function($){var namedParamRegex=/:([\w\d]+)/g;
var splatParamRegex=/\*([\w\d]+)/g;
var queryParamRegex=/([\w\d\-]+)\/([\w\d\-]+)/g;
_.templateSettings={evaluate:/\<\|([\s\S]+?)\|\>/g,interpolate:/\<\|\=([\s\S]+?)\|\>/g,escape:/\<\|\-([\s\S]+?)\|\>/g};
APF=function(config){if($.isFunction(config)){APF.initialize.push(config);
return;
}APF.Util.build({group:config.group,name:config.name,models:config.models});
if(config.initialize){APF.initialize.push(config.initialize);
}APF.html.push(config.group+"."+config.name+".Html");
APF.router.push(config.group+"."+config.name+".Router");
$.each(config.plugins||[],function(){APF.plugins.push(this);
});
};
$.extend(APF,Backbone.Events,{Util:{},Model:{},Collection:{},View:{},Mapper:{},Html:{},Router:{},Plugin:{}});
$.extend(APF,{app:{},bootstrapped:false,mapper:{},html:[],router:[],strings:{},data:{},urlPrefix:"",merchant:null,isDebug:0,isMockup:0,initialize:[],plugins:[],start:function(){if(this.bootstrapped){return;
}this.bootstrapped=true;
var that=this;
this.initializePlugins();
this.trigger("start:before");
this.initializeHtml();
this.initializeRouter();
$.each(this.initialize,function(){this.call(that);
});
Backbone.history.start();
this.trigger("start:after");
},initializePlugins:function(){var plugins=this.plugins;
var that=this;
this.plugins={};
$.each(plugins,function(){that.addPlugin(this);
});
},initializeHtml:function(){var html={};
$.each(this.html,function(){$.extend(true,html,APF.Util.strToObj(this));
});
this.html=html;
},initializeRouter:function(){var router={};
$.each(this.router,function(){$.extend(true,router,APF.Util.strToObj(this));
});
this.router=$.extend({parseArg:{},encodeArg:{},routesByName:{},currentRoute:"",currentRouteKey:null,actionsByView:{}},router);
this.initializeActions();
this.initializeRoutes();
},initializeActions:function(){var that=this;
$.each(this.router.routes,function(url,route){var name=route.name;
that.router.routesByName[name]=route;
if(!that.router.actionsByView[route.view]){that.router.actionsByView[route.view]={url:url,params:that.getUrlParams(url,route.query),view:APF.Util.strToObj(route.view),data:{}};
}});
},initializeRoutes:function(){var config={routes:{}};
var that=this;
$.each(this.router.routes,function(url,route){config.routes[url]=route.name;
});
$.each(this.router.routes,function(url,route){config[route.name]=function(){var args=$.makeArray(arguments);
args.unshift(route.name);
that.route.apply(that,args);
};
});
var Router=Backbone.Router.extend(config);
this.router.instance=new Router();
},extend:function(config){$.extend(this,config||{});
}});
$.extend(APF,{route:function(name){var action=this.getAction(name);
var oldRoute=this.router.currentRoute;
var key=APF.Util.dataToKey({route:name,args:_.toArray(arguments)});
if(key==this.router.currentRouteKey){return;
}this.router.currentRouteKey=key;
var event={to:name,from:this.router.currentRoute};
this.trigger("route:before",event);
this.setDataWithArgs.apply(this,arguments);
if(this.router.currentRoute!=name){if(this.router.currentRoute){var currentAction=this.getAction(this.router.currentRoute);
if(currentAction.instance.exit){currentAction.instance.exit();
}}this.router.currentRoute=name;
if(!action.instance){action.instance=new action.view({el:$("#apf")});
}}action.instance.render();
if(oldRoute!=name&&action.instance.enter){action.instance.enter();
}this.trigger("route:after",event);
},getAction:function(name){name=name||this.router.currentRoute;
return this.router.actionsByView[this.router.routesByName[name].view];
},sync:function(method,model,options){var types={"create":"POST","update":"PUT","delete":"DELETE","read":"GET"};
var urlType=(this.isMockup?"mockUrl":"url");
var url;
if($.isFunction(model[urlType])){url=model[urlType]();
}else{url=model[urlType];
}options=$.extend({url:url,type:"POST",dataType:"json",cache:false},options);
var modelData={};
if(method!="read"){if(options.models){var modelDataList=[];
$.each(options.models,function(){modelDataList.push(this.toJSON());
});
modelData=modelDataList;
}else{modelData=model.toJSON();
}}if(!$.isArray(modelData)){$.extend(modelData,options.data||{});
}options.data={method:types[method],model:JSON.stringify(modelData)};
if(options.modelAttributes){options.data.modelAttributes=JSON.stringify(options.modelAttributes);
}if(this.isDebug){options.data.isDebug=1;
}var beforeSend=options.beforeSend||$.noop;
var success=options.success||$.noop;
var error=options.error||$.noop;
var complete=options.complete||$.noop;
var that=this;
var setRequestId=function(jqXHR){model.requestId=jqXHR.getResponseHeader("x-amz-id-1");
};
options.beforeSend=function(jqXHR,settings){setRequestId(jqXHR);
that.trigger("sync:before",{jqXHR:jqXHR,settings:settings,model:model,options:options});
beforeSend(jqXHR,settings);
};
options.success=function(data,textStatus,jqXHR){setRequestId(jqXHR);
if(data&&data.error&&data.error.length){that.trigger("sync:error",{jqXHR:jqXHR,textStatus:textStatus,error:data.error,model:model,options:options});
}if(data&&data.errorMessage&&data.errorMessage.length){that.trigger("sync:error",{jqXHR:jqXHR,textStatus:textStatus,error:data.errorMessage,model:model,options:options});
}if(data&&data.debug&&data.debug.length){that.trigger("sync:debug",{jqXHR:jqXHR,textStatus:textStatus,debug:data.debug,model:model,options:options});
}that.trigger("sync:success",{jqXHR:jqXHR,textStatus:textStatus,data:data,model:model,options:options});
success(data,textStatus,jqXHR);
};
options.error=function(jqXHR,textStatus,errorThrown){that.trigger("sync:error",{jqXHR:jqXHR,textStatus:textStatus,errorThrown:errorThrown,model:model,options:options});
error(jqXHR,textStatus,errorThrown);
};
options.complete=function(jqXHR,textStatus){that.trigger("sync:after",{jqXHR:jqXHR,textStatus:textStatus,model:model,options:options});
complete(jqXHR,textStatus);
};
return $.ajax(options);
}});
$.extend(APF,{getUrlParams:function(url,query){var params=[];
var match;
$.each([namedParamRegex,splatParamRegex],function(i){do{match=this.exec(url);
if(match){var param=match[1];
params.push(param!="query"||!query?param:query);
}}while(match);
});
return params;
},getUrl:function(name,data){if(arguments.length==1){data=name;
name=this.router.currentRoute;
}var action=this.getAction(name);
var parts=action.url.split("?");
var url="#"+action.url;
data=this.encodeData(name,$.extend({},action.data||{},this.parseData(name,data||{})));
$.each(action.params,function(){if(!$.isArray(this)){url=url.replace(":"+this,data[this]);
url=url.replace("*"+this,data[this]);
}else{var query=[];
$.each(this,function(){var name=this;
var value=data[name];
if(value!==null&&value!==undefined){query.push(name+"/"+value);
}});
if(query.length){url=url.replace("*query",query.join("/"));
}else{url=url.replace("*query","");
}}});
return url;
}});
$.extend(APF,{getData:function(name){return this.getAction(name).data;
},copyData:function(name){return $.extend(true,{},this.getData(name));
},setData:function(name,data){if(arguments.length==1){data=name;
name=this.router.currentRoute;
}this.getAction(name).data=this.parseData(name,$.extend(this.getAction(name).data,data));
},setDataWithArgs:function(name){var args=$.makeArray(arguments).slice(1);
var params=this.getAction(name).params;
var values=[];
var data={};
$.each(params,function(i){var param=this;
var arg=args[i];
if($.isArray(param)){var match;
do{match=queryParamRegex.exec(arg);
if(match&&match.length==3){values.push({name:match[1],value:match[2]});
}}while(match);
}else{values.push({name:param,value:arg||null});
}});
$.each(values,function(){var value=this.value;
var name=this.name;
if(value==="true"){value=true;
}else{if(value==="false"){value=false;
}else{if(value==="null"||value==="undefined"){value=null;
}}}data[name]=value;
});
this.resetData(name);
this.setData(name,data);
},resetData:function(name){var action=this.getAction(name);
var data={};
$.each(action.params,function(){if($.isArray(this)){$.each(this,function(){data[this]=null;
});
}else{data[this]=null;
}});
this.setData(name,data);
},parseData:function(name,data){if(arguments.length==1){data=name;
name=this.router.currentRoute;
}return this.parseType(name,"parseArg",data);
},encodeData:function(name,data){if(arguments.length==1){data=name;
name=this.router.currentRoute;
}return this.parseType(name,"encodeArg",data);
},parseType:function(name,type,data){var parse=this.router[type];
var actionData=this.getAction(name).data;
var that=this;
if(!parse){return;
}$.each(data,function(param,value){if(parse[param]){value=parse[param](value,data,actionData);
}if(value===""||value===null||value===undefined){value=null;
}data[param]=value;
});
return data;
}});
$.extend(APF,{getAttr:function(attr){return this.data[attr];
},setAttr:function(attr,value){this.data[attr]=value;
}});
APF.addStrings=function(strings){$.extend(this.strings,strings);
};
$.extend(APF,{addPlugin:function(plugin){if($.isArray(this.plugins)){this.plugins.push(plugin);
}else{if(this.plugins[plugin]){return;
}this.plugins[plugin]=new (APF.Util.strToObj(plugin))();
}},removePlugin:function(plugin){if($.isArray(this.plugins)){this.plugins=_.without(this.plugins,plugin);
}else{if(!this.plugins[plugin]){return;
}this.plugins[plugin].destroy();
delete this.plugins[plugin];
}}});
}(jQuery));
(function($){$.extend(APF.Util,{strToObj:function(str){var obj=window;
$.each(str.split("."),function(){obj=obj[this];
});
return(obj==window?null:obj);
},strToFuncName:function(str){var func="";
$.each(str.split("."),function(i,s){if(!i){func+=s.toLowerCase();
}else{func+=s;
}});
return func;
},strCapitalCaseToDash:function(str){return str.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();
},strCaptializeFirstLetter:function(str){return str.charAt(0).toUpperCase()+str.slice(1);
},loadUrl:function(url){window.location.hash=url;
},replace:function(config){$.extend(this.prototype,config);
return this;
},dataToKey:function(data){var key=[];
$.each(_.keys(data||{}).sort(),function(){var value=data[this];
if(value===""||value===null||value===undefined){value=null;
}key.push(this);
key.push(value);
});
return(key.length?JSON.stringify(key):"default");
},stringLengthInByte:function(string){var val=$.trim(string);
return unescape(encodeURI(val)).length;
},extend:Backbone.Model.extend});
APF.Util.CSM={scope:null,record:function(instrument,scope){scope=scope||this.scope;
if(scope&&window.ue){instrument(scope);
}},start:function(scope){this.scope=_.uniqueId(scope+"_");
this.record(function(scope){uet("tc",scope);
},scope);
},response:function(requestId,scope){this.record(function(scope){ues("id",scope,requestId);
ues("t0",scope,new Date());
ues("ctb",scope,"1");
},scope);
},criticalFeature:function(scope){this.record(function(scope){uet("cf",scope);
},scope);
},stop:function(scope){this.record(function(scope){uet("be",scope);
ue.tag(scope);
uex("ld",scope);
},scope);
this.scope=null;
},widgetStart:function(widgetScope){this.widgetScope=_.uniqueId(widgetScope+"_");
if(typeof uet=="function"){this.record(function(widgetScope){uet("bb",widgetScope,{wb:1});
ues("t0",widgetScope,new Date());
},widgetScope);
}},widgetCriticalFeature:function(widgetScope){if(typeof uet=="function"){this.record(function(widgetScope){uet("cf",widgetScope,{wb:1});
},widgetScope);
}},widgetBodyEnd:function(widgetScope){if(typeof uet=="function"){this.record(function(widgetScope){uet("be",widgetScope,{wb:1});
},widgetScope);
}},widgetStop:function(widgetScope){if(typeof uet=="function"){this.record(function(widgetScope){uet("be",widgetScope,{wb:1});
},widgetScope);
}if(typeof uex=="function"){this.record(function(widgetScope){uex("ld",widgetScope,{wb:1});
},widgetScope);
}this.widgetScope=null;
}};
APF.Util.build=function(config){var group=config.group;
var name=config.name;
if(!window[group]){window[group]={};
}if(!window[group][name]){window[group][name]={};
}$.extend(window[group][name],{Util:{},Model:{},Collection:{},View:{},Mapper:{},Html:{},Router:{},Plugin:{}});
var app=window[group][name];
var urlFirstPart=group.toLowerCase()+"/"+APF.Util.strCapitalCaseToDash(name);
$.each(config.models||{},function(){var model=this;
var tail=model.substr(model.length-1);
var collection;
if(tail=="s"){collection=model;
}else{if(tail=="y"){collection=model.substr(0,model.length-1)+"ies";
}else{collection=model+"s";
}}if(!app.Model[model]){var urlModelLastPart="/models/"+APF.Util.strCapitalCaseToDash(model)+".html";
app.Model[model]=APF.Model.Base.extend({url:function(){return APF.urlPrefix+"/"+urlFirstPart+"/data"+urlModelLastPart;
},mockUrl:function(){return APF.urlPrefix+"/"+urlFirstPart+"/mock"+urlModelLastPart;
}});
app.Model[model].replace=APF.Util.replace;
}if(!app.Collection[collection]){var urlCollectionLastPart="/collections/"+APF.Util.strCapitalCaseToDash(collection)+".html";
app.Collection[collection]=APF.Collection.Base.extend({url:function(){return APF.urlPrefix+"/"+urlFirstPart+"/data"+urlCollectionLastPart;
},mockUrl:function(){return APF.urlPrefix+"/"+urlFirstPart+"/mock"+urlCollectionLastPart;
},model:app.Model[model]});
app.Collection[collection].replace=APF.Util.replace;
}});
};
}(jQuery));
(function($){APF.Model.Base=Backbone.Model.extend({url:"",associations:{},isModel:true,initialize:function(options){this.hasBeenSynced=false;
this.isMarkedForRemoval=false;
this.saveCount=0;
this.queue=new APF.Model.Queue();
var that=this;
$.each(options,function(key,value){if(key!="id"){that.hasBeenSynced=true;
}});
Backbone.Model.prototype.initialize.call(this,options);
this.initializeAssociations();
},initializeAssociations:function(){var that=this;
$.each(this.associations,function(associationName,associationOptions){if(associationOptions.model){that[associationName]=new (APF.Util.strToObj(associationOptions.model))();
var model=that[associationName];
var callbacks=[];
var change=function(data){var success=callbacks;
callbacks=[];
$.each(success,function(){this({data:data,model:model});
});
};
that["fetch"+APF.Util.strCaptializeFirstLetter(associationName)]=function(options){options=options||{};
callbacks.push(options.callback||$.noop);
if(callbacks.length>1){return;
}var data={};
$.each(associationOptions.attributes,function(from,to){data[to]=that.get(from);
});
if(model.get("id")){change(data);
return;
}model.fetch({data:data,success:function(){change(data);
}});
};
}else{that[associationName]=new (APF.Util.strToObj(associationOptions.collection))();
var collection=that[associationName];
that["fetch"+APF.Util.strCaptializeFirstLetter(associationName)]=function(options){options=options||{};
options.callback=options.callback||$.noop;
var data=options.data||{};
$.each(associationOptions.attributes,function(from,to){data[to]=that.get(from);
});
collection.fetch({data:data,callback:options.callback});
};
}});
},getAttr:function(attr){return this.get(attr);
},setAttr:function(attr,value,options){var attrs={};
attrs[attr]=value;
return this.set(attrs,options);
},sync:function(method,model,options){options=options||{};
if(!this.url){return this;
}var success=options.success||options.callback||$.noop;
var that=this;
options.success=function(response,textStatus,jqXHR){that.hasBeenSynced=true;
success(response,textStatus,jqXHR);
};
return APF.sync(method,model,options);
},parse:function(response){response=response||{};
return response.data||{};
},isValid:function(options){var options=options||{};
var attributes=this.attributes;
var isValid=true;
var that=this;
$.each(attributes||{},function(attr,value){var func="validate"+attr.substring(0,1).toUpperCase()+attr.substring(1);
if(!that[func]){return;
}var isAttrValid=that[func](value,attributes,options);
if(!isAttrValid){isValid=false;
if(!options.silent){that.trigger("error:"+attr,{model:that,attribute:attr,value:value});
}}});
if(!isValid){return false;
}return true;
},reset:function(attributes,options){this.hasBeenSynced=false;
var options=options||{};
this.clear({silent:true});
if(attributes){this.set(attributes);
}if(!options.silent){this.trigger("reset",this,options);
}},save:function(attributes,options){var that=this;
this.saveWithQueue(options,function(options){Backbone.Model.prototype.save.call(that,attributes,options);
});
},destroy:function(options){var that=this;
this.saveWithQueue(options,function(options){Backbone.Model.prototype.destroy.call(that,options);
});
},saveWithQueue:function(options,parentCallback){options=options||{};
parentCallback=parentCallback||$.noop;
var collection=this.collection;
var model=this;
if(options.queue){this.increaseSaveCount();
collection&&collection.increaseSaveCount();
this.queueSave(options,parentCallback);
return;
}var callback=options.success||$.noop;
var queue=this.queue;
options.async=true;
if(!options.inQueue){this.increaseSaveCount();
collection&&collection.increaseSaveCount();
}options.success=function(model,resp,xhr){callback(model,resp,xhr);
if(options.inQueue){queue.next();
}model.decreaseSaveCount();
collection&&collection.decreaseSaveCount();
};
parentCallback(options);
},queueSave:function(options,parentCallback){var queue=this.queue;
var that=this;
queue.add(function(){options.queue=false;
options.inQueue=true;
that.saveWithQueue(options,parentCallback);
});
if(queue.isLast()){queue.getCurrent()();
}},increaseSaveCount:function(){if(!this.isSaving()){this.trigger("save:before");
}this.saveCount++;
this.trigger("save");
},decreaseSaveCount:function(){this.saveCount--;
if(!this.isSaving()){this.trigger("save:after");
}},isSaving:function(){return(this.saveCount>0);
}});
}(jQuery));
(function($){APF.Model.Queue=APF.Model.Base.extend({initialize:function(options){this.setAttr("queue",[]);
},add:function(callback){this.getAttr("queue").push(callback);
},remove:function(){this.getAttr("queue").shift();
},getCurrent:function(){var queue=this.getAttr("queue");
return queue&&queue[0];
},next:function(){this.remove();
if(this.hasQueue()){this.getCurrent()();
}},hasQueue:function(){return this.getAttr("queue").length;
},isLast:function(){return(this.getAttr("queue").length==1);
}});
}(jQuery));
(function($){APF.Model.Merchant=APF.Model.Base.extend({url:""});
}(jQuery));
(function($){APF.Collection.Base=Backbone.Collection.extend({url:"",associations:{},isCollection:true,initialize:function(options){this.cid="collection"+$.now();
this.data={};
this.cache={};
this.queue=new APF.Model.Queue();
this.saveCount=0;
this.hasBeenSynced=false;
var queue=this.queue;
Backbone.Collection.prototype.initialize.call(this,options);
this.initializeAssociations();
},initializeAssociations:function(){var that=this;
$.each(this.associations,function(associationName,associationOptions){that[associationName]=new (APF.Util.strToObj(associationOptions.collection))();
that["fetch"+APF.Util.strCaptializeFirstLetter(associationName)]=function(options){options.callback=options.callback||$.noop;
var key=options.key||this.currentKey;
if(!key||!this.cache||!this.cache[key]||!this.cache[key].models||!this.cache[key].models.length){options.callback({key:key});
return;
}var models=this.cache[key].models;
var data={};
var that=this;
$.each(associationOptions.attributes,function(from,to){data[to]=[];
$.each(models,function(){data[to].push(this.get(from));
});
});
this[associationName].fetch({data:data,callback:options.callback});
};
});
},getAttr:function(attr){return this.data[attr];
},setAttr:function(attr,value){this.data[attr]=value;
},sync:function(method,model,options){options=options||{};
if(!this.url){return this;
}if(method!="read"){return APF.sync(method,model,options);
}this.data={};
if(this.syncFromCache(method,model,options)){return;
}var success=options.success||$.noop;
var that=this;
options.success=function(response,textStatus,jqXHR){that.hasBeenSynced=true;
success(response,textStatus,jqXHR);
};
return APF.sync(method,model,options);
},syncFromCache:function(method,model,options){if(!options.callback){return false;
}var key=APF.Util.dataToKey(options.data||{});
var cache=this.cache[key];
var success=options.success||$.noop;
var that=this;
if(!cache){this.cache[key]=cache={};
}if(!cache.callbacks){cache.callbacks=[];
}var trigger=function(data,models){var callbacks=cache.callbacks;
cache.callbacks=[];
$.each(callbacks,function(){this({key:key,data:data,models:models});
});
};
cache.callbacks.push(options.callback);
if(cache.callbacks.length>1){return true;
}if(cache.data||cache.models){this.currentKey=key;
this.data=cache.data;
trigger(cache.data,cache.models);
return true;
}options.add=true;
options.success=function(response,textStatus,jqXHR){that.currentKey=key;
success(response,textStatus,jqXHR);
that.hasBeenSynced=true;
response=response||{};
var data=response.data||[];
var list=($.isArray(data)?data:data.models);
var models=[];
$.each(list||[],function(){models.push(that.get(this.id));
});
cache.data=that.data;
cache.models=models;
trigger(data,models);
};
},parse:function(response){response=response||{};
var data=response.data;
var models=data;
if(data&&!$.isArray(data)){models=data.models;
data=$.extend({},data);
delete data.models;
}this.data=data;
var that=this;
if(this.currentKey){var list=[];
$.each(models||[],function(){if(!that.get(this.id)){list.push(this);
}});
models=list;
}return models||[];
},reset:function(models,options){this.cache={};
this.hasBeenSynced=false;
Backbone.Collection.prototype.reset.call(this,models,options);
},save:function(options){options=options||{};
var models=options.models||this.models;
if(options.queue){$.each(models,function(){this.increaseSaveCount();
});
this.increaseSaveCount();
this.queueSave(options);
return;
}var collection=this;
var successcallback=options.success||$.noop;
var errorCallback=options.error;
var newModels=[];
var updateModels=[];
var removedModels=[];
var saveCount=0;
$.each(models,function(){if(!options.inQueue){this.increaseSaveCount();
}if(this.isNew()){newModels.push(this);
return;
}if(this.isMarkedForRemoval){removedModels.push(this);
return;
}updateModels.push(this);
});
if(!options.inQueue){this.increaseSaveCount();
}var success=function(collection,resp,xhr){if(--saveCount){return;
}if(resp.errorMessage){if(errorCallback){errorCallback(collection,resp,xhr);
}else{successcallback(collection,resp,xhr);
}}else{successcallback(collection,resp,xhr);
}if(options.inQueue){collection.queue.next();
}$.each(models,function(){this.decreaseSaveCount();
});
collection.decreaseSaveCount();
};
saveSuccess=function(resp,status,xhr){resp=resp||{};
var data=resp.data||[];
var models=($.isArray(data)?data:(data.models||[]));
$.each(models,function(){var model=collection.get(this.id);
if(model){model.set(this,options);
}});
success(collection,resp,xhr);
};
createSuccess=function(resp,status,xhr){if(options.attachModelIds){options.attachModelIds(resp);
}saveSuccess(resp,status,xhr);
};
removeSuccess=function(resp,status,xhr){collection.remove(removedModels,options);
success(collection,resp,xhr);
};
if(newModels.length){saveCount++;
this.sync("create",this,$.extend(options,{success:createSuccess,models:newModels}));
}if(removedModels.length){saveCount++;
this.sync("delete",this,$.extend(options,{success:removeSuccess,models:removedModels}));
}if(updateModels.length){saveCount++;
this.sync("update",this,$.extend(options,{success:saveSuccess,models:updateModels}));
}},queueSave:function(options){var queue=this.queue;
var that=this;
queue.add(function(){options.queue=false;
options.inQueue=true;
that.save(options);
});
if(queue.isLast()){queue.getCurrent()();
}},increaseSaveCount:function(){if(!this.isSaving()){this.trigger("save:collection:before");
}this.saveCount++;
this.trigger("save:collection");
},decreaseSaveCount:function(){this.saveCount--;
if(!this.isSaving()){this.trigger("save:collection:after");
}},isSaving:function(){return(this.saveCount>0);
},objToModels:function(obj){var models=[];
var that=this;
$.each(obj||[],function(){models.push(new that.model(this));
});
return models;
},isValid:function(options){var isValid=true;
$.each(this.models||[],function(){if(!this.isValid(options)){isValid=false;
}});
return isValid;
},_prepareModel:function(model,options){model=Backbone.Collection.prototype._prepareModel.call(this,model,options);
if(model){model.queue=this.queue;
}return model;
},_removeReference:function(model){model.queue=new APF.Model.Queue();
$.each(this.cache,function(i,cacheObj){var models=[];
if(cacheObj.models){$.each(cacheObj.models,function(j,cacheModel){if(cacheModel!=model){models.push(cacheModel);
}});
cacheObj.models=models;
}});
Backbone.Collection.prototype._removeReference.call(this,model);
}});
}(jQuery));
(function($){APF.Mapper.Base=function(options){this.cache={};
this.initialize(options);
};
$.extend(APF.Mapper.Base.prototype,{initialize:$.noop,name:"parent",collection:"APF.Collection.Base",associates:{},views:{},find:function(data,state){var key=this.generateDataKey(data);
this.map=this.cache[key];
if(!this.map){this.map=this.build(key,data,state);
}return this.map;
},get:function(){return this.map;
},build:function(key,data,state){var map={state:state,associates:{},views:{}};
this.cache[key]=map;
map[this.name]=new (APF.Util.strToObj(this.collection))();
var collection=map[this.name];
this.buildAssociates(map);
$.extend(collection,map.associates,{state:state});
this.buildViews(map);
collection.fetch({add:false,data:data});
return map;
},buildAssociates:function(map){var name=this.name;
var state=map.state;
var collection=map[name];
var that=this;
$.each(this.associates,function(associateName,str){var associate=new (APF.Util.strToObj(str))();
associate[name]=collection;
associate.state=state;
map.associates[associateName]=associate;
associate.bind("reset",function(){associate.hasBeenReset=true;
$.each(associate.models,function(i,model){var parentModel=collection.get(model.get("id"));
var singularAssociateName=(associateName.charAt(associateName.length-1)=="s"?associateName.substring(0,associateName.length-1):associateName);
var singularParentName=(name.charAt(name.length-1)=="s"?name.substring(0,name.length-1):name);
parentModel[singularAssociateName]=model;
model[singularParentName]=parentModel;
});
});
});
collection.bind("reset",function(){collection.hasBeenReset=true;
if(!collection.length){return;
}var ids=[];
$.each(collection.models,function(){ids.push(this.get("id"));
});
$.each(map.associates,function(associateName,associate){associate.fetch({add:false,data:{ids:ids}});
});
});
},buildViews:function(map){var state=map.state;
var collection=map[this.name];
var that=this;
$.each(this.views,function(viewName,str){map.views[viewName]=new (APF.Util.strToObj(str))($.extend({},map.associates,{state:state,collection:collection}));
});
},generateDataKey:function(data){var key=[];
$.each(_.keys(data||{}).sort(),function(){var value=data[this];
if(value===""||value===null||value===undefined){value=null;
}key.push(this);
key.push(value);
});
return(key.length?JSON.stringify(key):"default");
}});
APF.Mapper.Base.extend=APF.Util.extend;
}(jQuery));
(function($){APF.View.Base=Backbone.View.extend({initialize:function(options){this.el=$(this.el);
},enter:$.noop,exit:$.noop});
}(jQuery));
(function($){APF.View.Controller=APF.View.Base.extend({renderOnReset:true,waitForRender:false,controls:null,useData:null,getMap:$.noop,initialize:function(){this.el=$(this.el);
this.isInView=false;
this.cache={collection:{},model:{},view:{}};
this.byCid={collection:{},model:{},view:{}};
this.state={key:null,view:null,data:null};
},attachEvents:function(){if(!this.controls){return;
}var that=this;
$("."+this.controls,this.el).click(function(e){that.goToPage(this);
e.preventDefault();
});
},enter:function(){if(this.isInView){return;
}this.isInView=true;
if(this.state.view){this.state.view.enter();
}this.attachEvents();
},exit:function(){this.isInView=false;
if(this.state.view){this.state.view.unbind("render",this.attachEvents);
this.state.view.exit();
}this.state.view=null;
},render:function(data){this.setData(data);
var key=this.generateKey();
var view=this.buildView(key);
var isNewView=this.state.view!=view;
if(!view){return;
}var isRendered=this.byCid.view[view.cid].isRendered||view.hasBeenRendered;
if(isNewView||this.isInView){if(this.state.view){this.state.view.unbind("render",this.attachEvents);
this.state.view.exit();
}view.bind("render",this.attachEvents,this);
}if(!this.waitForRender||isRendered){this.renderView({view:view,key:key,render:true,insert:isNewView,enter:this.isInView,attachEvents:this.isInView});
}else{this.renderLazyView({view:view,key:key,render:false,insert:true,enter:true,attachEvents:true});
}},renderView:function(options){var view=options.view;
this.state.key=options.key;
this.state.view=view;
if(options.insert){this.el.html(view.el);
}if(options.render){view.render();
}if(options.enter){view.enter();
}if(options.attachEvents){this.attachEvents();
}if(options.insert){this.trigger("render");
}},renderLazyView:function(options){var view=options.view;
var that=this;
var render=function(){view.unbind("render",render);
if(!that.byCid.view[view.cid]){return;
}that.renderView(options);
that.byCid.view[view.cid].isRendered=true;
};
view.bind("render",render);
},goToPage:function(link,data){link=$(link);
var data=data||link.data(this.controls);
var href=link.attr("href");
href=href.substr(href.indexOf("#"));
if(!data&&href.charAt(0)=="#"&&href!="#"){APF.Util.loadUrl(href);
}else{this.render(data||{});
}},setData:function(data){var copyData={};
var apfData=APF.copyData();
if(this.useData){$.each(this.useData,function(){if(apfData[this]){copyData[this]=apfData[this];
}});
}else{copyData=apfData;
}this.state.data=$.extend(copyData,data||{});
},getData:function(){return this.state.data;
},generateKey:function(){return APF.Util.dataToKey(this.getData());
},getCollection:function(str){var collection;
if(!str){return;
}if(typeof(str)!="string"){collection=str;
}else{if(!this.cache.collection[collection]){this.cache.collection[str]=new (APF.Util.strToObj(str))();
}}if(!collection){collection=this.cache.collection[str];
}if(!this.byCid.collection[collection.cid]){this.byCid.collection[collection.cid]=collection;
collection.bind("reset",this.reset,this);
}return collection;
},getModel:function(str,key){var model;
if(!str){return;
}if(typeof(str)!="string"){model=str;
}else{if(!this.cache.model[key]){this.cache.model[key]=new (APF.Util.strToObj(str))();
}}if(!model){model=this.cache.model[key];
}if(!this.byCid.model[model.cid]){this.byCid.model[model.cid]=model;
model.bind("reset",this.reset,this);
}return model;
},buildView:function(key){var data=this.getData();
var map=this.getMap();
if(!map||!map.view){return;
}var str=map.view;
var collection=this.getCollection(map.collection);
var model=this.getModel(map.model,key);
var view;
if(typeof(str)!="string"){view=str;
}else{if(!this.cache.view[key]){this.cache.view[key]=new (APF.Util.strToObj(str))({parent:this,key:key,data:data,collection:collection,model:model});
}}if(!view){view=this.cache.view[key];
}if(!this.byCid.view[view.cid]){this.byCid.view[view.cid]={isRendered:false};
}return view;
},reset:function(model){var isCurrentView=false;
var that=this;
$.each(this.cache.view,function(key,view){if(!view||(view.model!=model&&view.collection!=model)){return;
}that.cache.view[key]=null;
that.byCid.view[view.cid]=null;
if(that.state.view==view){isCurrentView=true;
view.unbind("render",this.attachEvents);
view.exit();
}if(view.destroy){view.destroy();
}});
if(isCurrentView&&this.renderOnReset){this.state={key:null,view:null,data:null};
this.render();
}}});
}(jQuery));
(function($){APF.View.Collection=APF.View.Base.extend({renderSize:10,view:null,container:null,templates:{layout:null,loading:null,empty:null},attachEvents:$.noop,getTemplateData:function(data,model,collection){return{data:data,model:model,collection:collection};
},initialize:function(options){this.el=$(this.el);
this.key=options.key;
this.data=options.data;
this.parent=options.parent;
this.collectionResponse=null;
this.models=[];
this.templateCache={};
this.views=[];
this.containerEl=null;
this.isLoading=false;
this.hasBeenRendered=false;
this.isInView=false;
this.loadCollectionData();
},loadCollectionData:function(){if(this.model&&!this.model.hasBeenSynced){this.model.bind("change",this.setCollectionModelData,this);
}var that=this;
this.collection.fetch({data:this.data,callback:function(response){that.setCollectionData(response);
}});
this.isLoading=true;
},setCollectionModelData:function(){if(!this.model.hasBeenSynced){return;
}this.model.unbind("change",this.setCollectionModelData);
this.setCollectionDataLoadComplete();
},setCollectionData:function(response){this.collectionResponse=response||{models:[]};
this.models=this.collectionResponse.models;
this.setCollectionDataLoadComplete();
},setCollectionDataLoadComplete:function(){if(this.isLoadingCollectionData()){return;
}var view=(typeof(this.view)=="string"?APF.Util.strToObj(this.view):this.view);
var that=this;
that.setContainer();
$.each(this.models,function(){var itemView=new view({parent:that,model:this});
that.views.push(itemView);
that.containerEl.append(itemView.el);
if(that.isInView){itemView.render();
itemView.enter();
}});
this.collection.trigger("render:after");
},isLoadingCollectionData:function(){if(!this.isLoading){return false;
}if(this.model&&!this.model.hasBeenSynced){return true;
}if(!this.collectionResponse){return true;
}return false;
},isCollectionDataEmpty:function(){return !this.collectionData||!this.collectionData.models.length;
},enter:function(){this.isInView=true;
$.each(this.views,function(){this.enter();
});
this.attachEvents();
},exit:function(){this.isInView=false;
$.each(this.views,function(){this.exit();
});
},render:function(){if(this.isLoadingCollectionData()&&this.renderTemplate("loading")){return;
}if(!this.isLoadingCollectionData()&&this.isCollectionDataEmpty()&&this.renderTemplate("empty")){return;
}$.each(this.views,function(){this.render();
});
},renderTemplate:function(templateType){if(!this.templates[templateType]){return false;
}if(!this.templateCache[templateType]){var templateData=this.getTemplateData(this.data,this.model,this.collectionResponse);
this.templateCache[templateType]=_.template($(this.templates[templateType]).html())(templateData);
}this.el.html(this.templateCache[templateType]);
this.attachEvents();
this.hasBeenRendered=true;
this.trigger("render");
return true;
},setContainer:function(){if(this.containerEl){return;
}this.renderTemplate("layout");
if(this.container){this.containerEl=$(this.container,this.el);
}else{this.containerEl=this.el;
}}});
}(jQuery));
(function($){APF.View.Widget=APF.View.Base.extend({data:{},currentState:"loading",templates:{loading:"",empty:"",front:"",back:""},initialize:function(options){this.parent=options.parent;
this.el=$(this.el);
this.templatesByState={};
this.currentState="loading";
if(this.collection){this.collection=new this.collection();
}if(this.model){this.model=new this.model();
}if(!this.setState(this.currentState)){this.setState("front");
}if(this.collection){this.collection.bind("reset",this.reset,this);
this.collection.fetch({data:this.data});
}if(this.model){this.model.bind("reset",this.reset,this);
this.model.fetch({data:this.data});
}},attachEvents:function(){var that=this;
$(".apf-widget-toggle",this.el).click(function(e){that.toggleState();
e.preventDefault();
});
$(".apf-widget-remove",this.el).click(function(e){that.remove();
e.preventDefault();
});
},reset:function(){var data={collection:this.collection,model:this.model};
if(!this.collection.length){if(!this.setState("empty")){this.setState("front",data);
}}else{this.setState("front",data);
}this.render();
},getBackgroundColor:function(){var color=this.el.css("backgroundColor");
this.el.parents().each(function(){if(color&&color!="transparent"){return;
}color=$(this).css("backgroundColor");
});
return color;
},toggleState:function(){var state;
var dir;
if(this.currentState=="front"){state="back";
dir="rl";
}else{state="front";
dir="lr";
}this.setState(state,{collection:this.collection,model:this.model},dir);
},setState:function(state,data,flipDir){if(!this.templates[state]){return false;
}this.currentState=state;
var that=this;
if(!this.templatesByState[state]){this.templatesByState[state]=_.template($(this.templates[state]).html())(data||{});
}if(!flipDir||!this.el.flip){this.el.html(this.templatesByState[state]);
this.attachEvents();
this.render();
}else{this.el.flip({direction:flipDir,color:this.getBackgroundColor(),content:this.templatesByState[state],onEnd:function(){that.attachEvents();
that.render();
}});
}return true;
},remove:function(){if(this.parent&&this.parent.removeView&&this.el.attr("id")){this.parent.removeView(this.parent.viewIdToName[this.el.attr("id")]);
}else{this.el.remove();
}}});
}(jQuery));
(function($){APF.View.Layout=APF.View.Base.extend({initialize:function(){this.el=$(this.el);
this.containers={};
this.views={};
this.viewIdToName={};
this.createLayout();
var customizeLink=$("#apf-layout-customize");
var customizeTemplate=$("#apf-template-layout-customize");
if(customizeLink.length&&customizeTemplate.length){this.customize=new APF.View.LayoutCustomize({parent:this,link:customizeLink,template:customizeTemplate});
}},attachEvents:function(){if(!this.name){return;
}var that=this;
$.each(this.containers,function(selector,container){container.addClass("apf-layout-sortable");
container.sortable({connectWith:".apf-layout-sortable",handle:".apf-layout-sortable-handle",cursor:"pointer",update:function(){that.save();
}});
container.disableSelection();
});
},enter:function(){$.each(this.views,function(name,view){view.enter();
});
if(this.customize){this.customize.enter();
}this.attachEvents();
},exit:function(){$.each(this.views,function(name,view){view.exit();
});
if(this.customize){this.customize.exit();
}},render:function(){$.each(this.views,function(name,view){view.render();
});
this.trigger("render");
},renderLayout:function(){if(this.templateId){this.template=_.template($(this.templateId).html());
this.el.html(this.template());
}},getContainer:function(selector){if(!this.containers[selector]){this.containers[selector]=$(selector,this.el);
}return this.containers[selector];
},getView:function(name){if(!this.views[name]){var view=new (APF.Util.strToObj(name))({parent:this});
var id=APF.Util.strCapitalCaseToDash(APF.Util.strToFuncName(name));
this.views[name]=view;
this.viewIdToName[id]=name;
view.el.attr("id",id);
view.el.addClass("apf-layout-view");
}return this.views[name];
},addView:function(name){if(this.views[name]){return;
}var container;
var view=this.getView(name);
var that=this;
$.each(this.containers,function(selector,viewNames){if(container){return;
}container=that.getContainer(selector);
});
container.prepend(view.el);
view.render();
view.enter();
this.save();
},removeView:function(name){if(!this.views[name]){return;
}this.views[name].exit();
this.views[name].el.remove();
delete this.views[name];
this.save();
},createLayout:function(layout,save){var layout=this.getLayout(layout);
var that=this;
this.destroy();
$.each(layout,function(selector,viewNames){var container=that.getContainer(selector);
$.each(viewNames||[],function(){var view=that.getView(this);
container.append(view.el);
});
});
if(save){this.save();
}},getLayout:function(layout){var layout=layout||this.getSavedLayout()||this.layout;
var config={};
$.each(layout,function(selector,viewNames){if(selector=="more"){return;
}config[selector]=[];
$.each(viewNames,function(){config[selector].push(this);
});
});
return config;
},getSavedLayout:function(){if(!this.name){return;
}var pairs=document.cookie.split("; ");
var data;
for(var i=0,pair;
pair=pairs[i]&&pairs[i].split("=");
i++){if(decodeURIComponent(pair[0])==this.name){data=decodeURIComponent(pair[1]||"");
}}if(!data){return;
}var layout={};
$.each(data.split("|")||[],function(){var pairs=this.split(":");
layout[pairs[0]]=($.trim(pairs[1]||"")?pairs[1].split(";"):[]);
});
return layout;
},save:function(){if(!this.name){return;
}var data=[];
var that=this;
$.each(this.containers,function(selector,container){var arr=container.sortable("toArray");
var list=[];
$.each(arr||[],function(){list.push(that.viewIdToName[this]);
});
data.push("#"+container.attr("id")+":"+list.join(";"));
});
document.cookie=encodeURIComponent(this.name)+"="+encodeURIComponent(data.join("|"))+"; secure";
},destroy:function(){var that=this;
$.each(this.layout,function(selector,viewNames){$.each(viewNames,function(){that.removeView(this);
});
});
}});
}(jQuery));
(function($){APF.View.LayoutCustomize=APF.View.Base.extend({initialize:function(options){this.parent=options.parent;
this.link=$(options.link);
this.template=_.template($(options.template).html());
},attachEvents:function(){var that=this;
this.link.click(function(){if(!that.popover){that.render();
}else{that.close();
}return false;
});
},attachPopoverEvents:function(){var parent=this.parent;
var form=$("form",this.popover);
var that=this;
form.submit(function(){that.close();
return false;
});
$('input[type="checkbox"]',form).change(function(){var checkbox=$(this);
if(checkbox.is(":checked")){parent.addView(checkbox.val());
}else{parent.removeView(checkbox.val());
}});
$("#apf-layout-customize-use-defaults").click(function(){that.useDefaults();
return false;
});
},enter:function(){this.attachEvents();
},exit:function(){if(this.popover){this.close();
}},render:function(){var that=this;
this.popover=$.AmazonPopover.displayPopover({title:"Customize Layout",locationElement:this.link,location:"auto",width:300,draggable:true,showCloseButton:true,literalContent:this.getContent(),onHide:function(){that.popover=null;
}});
this.attachPopoverEvents();
},getContent:function(){return this.template({layout:this.parent.layout,views:this.parent.views});
},useDefaults:function(){this.parent.createLayout(this.parent.layout,true);
$("form",this.popover).replaceWith(this.getContent());
this.attachPopoverEvents();
},close:function(){if(!this.popover){return;
}this.popover.close();
}});
}(jQuery));
(function($){APF.View.Error=APF.View.Base.extend({initialize:function(){this.collection.bind("add",this.render,this);
},render:function(error){var msg=error.get("msg");
var str="";
this.collection.remove(error);
if(!$.isArray(msg)){msg=[msg];
}$.each(msg,function(){str+=this+"\n";
});
alert(str);
}});
}(jQuery));
(function($){APF.View.Loading=APF.View.Base.extend({initialize:function(){this.el=$(_.template($("#apf-template-loading").html())());
this.isIE6=$.browser.msie&&$.browser.version.substr(0,1)=="6";
this.window=$(window);
this.time;
this.scrollInterval;
$("body").append(this.el);
if(this.isIE6){this.el.css("position","absolute");
}this.el.css("margin-left",this.el.width()/2*-1);
this.collection.bind("add",this.render,this);
this.collection.bind("remove",this.render,this);
},render:function(){if(this.time){clearTimeout(this.time);
this.time=null;
}if(this.scrollInterval){clearInterval(this.scrollInterval);
this.scrollInterval=null;
}if(this.collection.length){var that=this;
this.time=setTimeout(function(){that.render();
},100);
if(this.isIE6){that.el.css("top",that.window.scrollTop());
this.scrollInterval=setInterval(function(){that.el.css("top",that.window.scrollTop());
},15);
}this.el.show();
}else{this.el.hide();
}}});
}(jQuery));
(function($){APF.View.Popover=APF.View.Base.extend({initialize:function(options){this.popoverOptions=options;
this.popover=null;
this.el=null;
this.isShown=false;
var that=this;
this.popoverOptions.onHide=function(){that.onHide();
};
},render:function(){this.isShown=true;
if(this.popover!=null){return this;
}this.popover=$.AmazonPopover.displayPopover(this.popoverOptions);
this.el=$("div.ap_content",this.popover);
this.trigger("render");
this.enter();
return this;
},show:function(){this.render();
},hide:function(){if(!this.isShown){return;
}this.popover.close();
},onHide:function(){this.trigger("hide:before");
this.isShown=false;
this.popover=null;
this.el=null;
this.trigger("hide");
}});
}(jQuery));
(function($){APF.Plugin.Base=function(){this.initialize();
};
APF.Plugin.Base.prototype={initialize:$.noop,render:$.noop,destroy:$.noop};
APF.Plugin.Base.extend=APF.Util.extend;
}(jQuery));
(function($){APF.Plugin.Debug=APF.Plugin.Base.extend({initialize:function(){APF.bind("sync:debug",this.render,this);
},destroy:function(){APF.unbind("sync:debug",this.render,this);
},render:function(e){if(!window.console||!console.log){return;
}$.each(e.debug||[],function(){console.log(this+"");
});
}});
}(jQuery));
(function($){APF.Plugin.Error=APF.Plugin.Base.extend({initialize:function(){this.collection=new APF.Collection.Base();
this.view=new APF.View.Error({collection:this.collection});
APF.bind("sync:error",this.render,this);
},destroy:function(){APF.unbind("sync:error",this.render,this);
},render:function(e){if(!e.error){return;
}this.collection.add([{msg:e.error}]);
}});
}(jQuery));
(function($){APF.Plugin.Reftag=APF.Plugin.Base.extend({initialize:function(){APF.bind("sync:before",this.render,this);
},destroy:function(){APF.unbind("sync:before",this.render,this);
},render:function(data){var settings=data.settings;
var options=data.options||{};
var reftag=options.reftag;
if(reftag){settings.url=SCUI.Tools.Reftag.addToUrl($.extend({url:settings.url},reftag));
}}});
}(jQuery));
(function($){APF.Plugin.Loading=APF.Plugin.Base.extend({initialize:function(){this.collection=new APF.Collection.Base();
this.view=new APF.View.Loading({collection:this.collection});
APF.bind("sync:before",this.add,this);
APF.bind("sync:after",this.remove,this);
},add:function(e){this.collection.add({model:e.model});
},remove:function(e){this.collection.remove(this.collection.find(function(m){return m.get("model")==e.model;
}));
},destroy:function(){APF.unbind("sync:before",this.add,this);
APF.unbind("sync:after",this.remove,this);
}});
}(jQuery));
(function($){APF.Plugin.Session=APF.Plugin.Base.extend({loginPath:"/",isLoginPage:function(e){var xml=e.jqXHR.responseText;
if(e.textStatus!="parseerror"||!xml){return false;
}if($('form[name="signin"]',xml).length||$('form[name="signIn"]',xml).length){return true;
}},initialize:function(){APF.bind("sync:error",this.render,this);
},destroy:function(){APF.unbind("sync:error",this.render,this);
},render:function(e){if(this.isLoginPage(e)){window.location=this.loginPath;
}}});
}(jQuery));
if(window.amznJQ){if(typeof amznJQ.declareAvailable==="function"){amznJQ.declareAvailable("apf-1.1");
}}